app-id: co.aiclient.risu
runtime: org.freedesktop.Platform
runtime-version: '23.08'
sdk: org.freedesktop.Sdk
sdk-extensions:
  - org.freedesktop.Sdk.Extension.rust-nightly
  - org.freedesktop.Sdk.Extension.node20
command: risuai
separate-locales: false

finish-args:
  - --share=network
  - --share=ipc
  - --socket=fallback-x11
  - --socket=wayland
  - --device=dri
  - --filesystem=home
  - --talk-name=org.freedesktop.Notifications
  - --talk-name=org.kde.StatusNotifierWatcher
  - --talk-name=com.canonical.AppMenu.Registrar
  - --talk-name=com.canonical.indicator.application
  - --own-name=org.mpris.MediaPlayer2.risuai

build-options:
  append-path: /usr/lib/sdk/rust-nightly/bin:/usr/lib/sdk/node20/bin
  build-args:
    - --share=network
  env:
    CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: clang
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS: -C link-arg=--target=x86_64-unknown-linux-gnu
    CC_x86_64_unknown_linux_gnu: clang --target=x86_64-unknown-linux-gnu
    CXX_x86_64_unknown_linux_gnu: clang++ --target=x86_64-unknown-linux-gnu
    # Node.js와 npm 설정 (환경 변수만 사용)
    NODE_ENV: production
    NPM_CONFIG_CACHE: /run/build/risuai/npm-cache
    NPM_CONFIG_PREFIX: /run/build/risuai/npm-global
    NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
    NPM_CONFIG_FORCE: 'true'
    NPM_CONFIG_LEGACY_PEER_DEPS: 'true'
    NPM_CONFIG_FETCH_RETRIES: '5'
    NPM_CONFIG_FETCH_RETRY_FACTOR: '10'
    NPM_CONFIG_AUDIT: 'false'
    NPM_CONFIG_FUND: 'false'
    # 플랫폼 관련 환경 변수
    npm_config_target_platform: linux
    npm_config_target_arch: x64
    npm_config_disturl: https://electronjs.org/headers

modules:
  # WebKit2GTK and JavaScriptCore dependencies for Flatpak
  - name: webkit2gtk-deps
    buildsystem: simple
    build-commands:
      # JavaScript Core GTK와 WebKit2GTK 개발 라이브러리 설치
      - echo "Installing WebKit2GTK and JavaScriptCore dependencies..."
      # Flatpak 환경에서 필요한 패키지 설치
      - |
        if command -v dnf >/dev/null 2>&1; then
          dnf install -y webkit2gtk4.1-devel || dnf install -y webkit2gtk3-devel || echo "Failed to install webkit deps via dnf"
        elif command -v yum >/dev/null 2>&1; then
          yum install -y webkit2gtk4.1-devel || yum install -y webkit2gtk3-devel || echo "Failed to install webkit deps via yum"
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update && apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev || echo "Failed to install webkit deps via apt"
        else
          echo "No package manager found, will try to continue without webkit deps"
        fi
      # pkg-config 파일 확인
      - find /usr -name "*javascriptcore*" -type f 2>/dev/null || echo "No JavaScript Core files found"
      - find /usr -name "*webkit*" -type f 2>/dev/null | head -10 || echo "No WebKit files found"
      - pkg-config --list-all | grep -E "(javascript|webkit)" || echo "No webkit/js packages in pkg-config"
    sources: []
  - name: risuai
    buildsystem: simple
    build-commands:
      # 진단: Flatpak 빌드 환경 확인
      - echo "=== Flatpak Build Environment Diagnostic ==="
      - echo "SDK Version:" && cat /usr/lib/os-release || echo "No OS release info"
      - echo "Available Rust versions:" && find /usr/lib/sdk -name "*rust*" -type d || echo "No Rust SDKs found"
      - echo "Rust SDK Extension status:" && ls -la /usr/lib/sdk/rust-nightly/ || echo "Rust nightly not found"
      # 링커 환경 설정 (clang 사용 가능성 확인)
      - echo "=== Checking Available Compilers ==="
      - which clang && echo "Clang found: $(clang --version)" || echo "Clang not available"
      - which gcc && echo "GCC found: $(gcc --version)" || echo "GCC not available"
      - |
        if command -v clang >/dev/null 2>&1; then
          echo "Using clang as configured"
        else
          echo "Clang not available, modifying linker configuration to use gcc"
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=gcc
          export CC_x86_64_unknown_linux_gnu=gcc
          export CXX_x86_64_unknown_linux_gnu=g++
          unset CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS
        fi
      # Node.js 환경 설정
      - export PATH=/usr/lib/sdk/node20/bin:$PATH
      - node --version
      - npm --version
      # npm 설정 (유효한 옵션만 사용)
      - npm config set force true
      - npm config set legacy-peer-deps true
      - npm config set registry https://registry.npmjs.org/
      - npm config set fetch-retries 5
      - npm config set fetch-retry-factor 10
      - npm config set audit false
      - npm config set fund false
      # 환경 변수로 플랫폼 설정
      - export npm_config_target_platform=linux
      - export npm_config_target_arch=x64
      - export npm_config_disturl=https://electronjs.org/headers
      - export npm_config_cache=/run/build/risuai/npm-cache
      # 프로젝트 구조 확인
      - ls -la
      - cat package.json | grep -A5 -B5 "scripts" || echo "No scripts section found"
      - ls -la src-tauri/ || echo "No src-tauri directory found"
      # 의존성 설치 (npm 사용)
      - npm install --legacy-peer-deps --force --no-optional --no-audit --no-fund
      # 진단: Rust 및 Cargo 버전 확인
      - echo "=== Rust Toolchain Diagnostic ==="
      - export PATH=/usr/lib/sdk/rust-nightly/bin:$PATH
      - rustc --version || echo "Rust not available"
      - cargo --version || echo "Cargo not available"
      - echo "=== Dependency Analysis ==="
      - cd src-tauri
      - cargo tree --format "{p} {f}" | grep -E "(base64ct|edition)" || echo "No edition-related dependencies found"
      - cd ..
      # Tauri 스크립트 확인 및 빌드 (링커 설정 포함)
      - |
        export PATH=/usr/lib/sdk/rust-nightly/bin:$PATH
        
        # 링커 환경변수 재설정 (clang 사용 가능성에 따라)
        if command -v clang >/dev/null 2>&1; then
          echo "Using clang as linker"
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang
          export CC_x86_64_unknown_linux_gnu="clang --target=x86_64-unknown-linux-gnu"
          export CXX_x86_64_unknown_linux_gnu="clang++ --target=x86_64-unknown-linux-gnu"
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS="-C link-arg=--target=x86_64-unknown-linux-gnu"
        else
          echo "Fallback to gcc as linker"
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=gcc
          export CC_x86_64_unknown_linux_gnu=gcc
          export CXX_x86_64_unknown_linux_gnu=g++
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS=""
        fi
        
        echo "Current linker config:"
        echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER"
        echo "CC_x86_64_unknown_linux_gnu=$CC_x86_64_unknown_linux_gnu"
        
        if npm run --silent | grep -q "tauri"; then
          echo "Found tauri script, running build..."
          npm run tauri build -- --target x86_64-unknown-linux-gnu
        elif [ -f "src-tauri/Cargo.toml" ]; then
          echo "No tauri script found, trying direct cargo build..."
          cd src-tauri
          cargo build --release --target x86_64-unknown-linux-gnu
          cd ..
        else
          echo "No Tauri configuration found, this might not be a Tauri project"
          exit 1
        fi
      # 빌드 결과 확인
      - ls -la src-tauri/target/x86_64-unknown-linux-gnu/release/ || echo "Release directory not found"
      - find src-tauri/target -name "*" -type f -executable | head -10 || echo "No executables found"
      # 실행 파일 찾기 및 설치 (유연한 방식)
      - |
        RELEASE_DIR="src-tauri/target/x86_64-unknown-linux-gnu/release"
        if [ -f "$RELEASE_DIR/risuai" ]; then
          BINARY_NAME="risuai"
        elif [ -f "$RELEASE_DIR/risu-ai" ]; then
          BINARY_NAME="risu-ai"
        elif [ -f "$RELEASE_DIR/RisuAI" ]; then
          BINARY_NAME="RisuAI"
        else
          # 첫 번째로 찾은 실행 파일 사용
          BINARY_NAME=$(find $RELEASE_DIR -maxdepth 1 -type f -executable | head -1 | xargs basename)
        fi
        
        if [ -n "$BINARY_NAME" ] && [ -f "$RELEASE_DIR/$BINARY_NAME" ]; then
          echo "Installing binary: $BINARY_NAME"
          install -Dm755 "$RELEASE_DIR/$BINARY_NAME" /app/bin/risuai
        else
          echo "No suitable binary found in $RELEASE_DIR"
          exit 1
        fi
      # 아이콘 찾기 및 설치 (유연한 방식)
      - |
        ICON_DIRS=("src-tauri/icons" "icons" "assets/icons" "public/icons")
        ICON_SIZES=("128x128" "128" "icon")
        
        for dir in "${ICON_DIRS[@]}"; do
          if [ -d "$dir" ]; then
            echo "Found icon directory: $dir"
            ls -la "$dir" || true
            
            # 128x128 아이콘 찾기
            for size in "${ICON_SIZES[@]}"; do
              if [ -f "$dir/${size}.png" ]; then
                install -Dm644 "$dir/${size}.png" /app/share/icons/hicolor/128x128/apps/co.aiclient.risu.png
                echo "Installed 128x128 icon from $dir/${size}.png"
                break
              elif [ -f "$dir/${size}x${size}.png" ]; then
                install -Dm644 "$dir/${size}x${size}.png" /app/share/icons/hicolor/128x128/apps/co.aiclient.risu.png
                echo "Installed 128x128 icon from $dir/${size}x${size}.png"
                break
              fi
            done
            
            # 256x256 또는 고해상도 아이콘 찾기
            if [ -f "$dir/128x128@2x.png" ]; then
              install -Dm644 "$dir/128x128@2x.png" /app/share/icons/hicolor/256x256/apps/co.aiclient.risu.png
              echo "Installed 256x256 icon from $dir/128x128@2x.png"
            elif [ -f "$dir/256x256.png" ]; then
              install -Dm644 "$dir/256x256.png" /app/share/icons/hicolor/256x256/apps/co.aiclient.risu.png
              echo "Installed 256x256 icon from $dir/256x256.png"
            elif [ -f "$dir/256.png" ]; then
              install -Dm644 "$dir/256.png" /app/share/icons/hicolor/256x256/apps/co.aiclient.risu.png
              echo "Installed 256x256 icon from $dir/256.png"
            fi
            break
          fi
        done
      # 메타데이터 설치 (있는 경우에만)
      - |
        if [ -f "co.aiclient.risu.metainfo.xml" ]; then
          install -Dm644 co.aiclient.risu.metainfo.xml -t /app/share/metainfo/
        else
          echo "No metainfo.xml found, skipping..."
        fi
      - |
        if [ -f "co.aiclient.risu.desktop" ]; then
          install -Dm644 co.aiclient.risu.desktop -t /app/share/applications/
        else
          echo "No desktop file found, skipping..."
        fi
    sources:
      - type: dir
        path: .
        skip:
          - .git
          - node_modules
          - src-tauri/target