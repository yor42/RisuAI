name: 'publish'
on:
  push:
    branches:
      - production
  workflow_dispatch: {}

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [ubuntu-latest,macos-latest,windows-latest]
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-latest' # ARM Linux support (Raspberry Pi, ARM servers, etc.)
            args: '--target aarch64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # Android build
            args: 'android'
            android: true
          - platform: 'ubuntu-latest' # Flatpak build
            args: 'flatpak'
            flatpak: true
           
    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: set_var_win
        if: matrix.settings.platform == 'windows-latest'
        run: |
          choco install jq -y
      - id: set_var
        shell: bash
        run: |
          echo "VERSION_JSON=$(jq -c . < version.json)" >> $GITHUB_ENV
      - name: install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-latest' && !matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # ARM Linux cross-compilation dependencies
          if [[ "${{ matrix.settings.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            # Add arm64 architecture but skip problematic package installation for CI
            sudo dpkg --add-architecture arm64 || true
            # Update sources but continue on errors
            sudo apt-get update || true
            # Install cross-compilation libraries (optional, continue on failure)
            sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.1-dev:arm64 libgtk-3-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 libglib2.0-dev:arm64 libgobject-introspection-1.0-dev:arm64 || echo "Warning: Some ARM64 packages could not be installed, continuing with basic cross-compilation tools"
          fi
      - name: setup java (android only)
        if: matrix.settings.android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: setup android sdk (android only)
        if: matrix.settings.android
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          log-accepted-android-sdk-licenses: false
      - name: install android ndk and setup (android only)
        if: matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
      - name: setup flatpak (flatpak only)
        if: matrix.settings.flatpak
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.freedesktop.Sdk.Extension.rust-stable//23.08 org.freedesktop.Sdk.Extension.node20//23.08
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.settings.android && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || (contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'aarch64-unknown-linux-gnu' || '')) }}
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: install frontend dependencies
        run: pnpm install --no-frozen-lockfile # change this to npm or pnpm depending on which one you use
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: add android rust targets
        if: matrix.settings.android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
      - name: setup arm linux cross compilation
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          rustup target add aarch64-unknown-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP_aarch64_unknown_linux_gnu=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/aarch64-linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L /usr/lib/aarch64-linux-gnu -L /usr/aarch64-linux-gnu/lib" >> $GITHUB_ENV
      - uses: tauri-apps/tauri-action@v0.5.16
        if: ${{ !matrix.settings.flatpak && !matrix.settings.android }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: 'v__VERSION__' # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: 'Release of v__VERSION__'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.settings.args }}
          tauriScript: "pnpm tauri"
      - name: build android
        if: matrix.settings.android
        run: |
          pnpm tauri android init
          pnpm tauri android build
          mkdir -p android-build
          find src-tauri/gen/android -name "*.apk" -exec cp {} android-build/ \;
      - name: upload android artifacts
        if: matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android-build/
      - name: build flatpak
        if: matrix.settings.flatpak
        run: |
          flatpak-builder --force-clean --sandbox --repo=repo --ccache --mirror-screenshots-url=https://dl.flathub.org/media/ --install-deps-from=flathub build-dir co.aiclient.risu.yml
          flatpak build-bundle repo risuai.flatpak co.aiclient.risu
          mkdir -p flatpak-build
          mv risuai.flatpak flatpak-build/
      - name: upload flatpak artifact
        if: matrix.settings.flatpak
        uses: actions/upload-artifact@v4
        with:
          name: flatpak
          path: flatpak-build/