name: 'publish'
on:
  push:
    branches:
      - production
  workflow_dispatch: {}

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [ubuntu-latest,macos-latest,windows-latest]
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-latest' # ARM Linux support (Raspberry Pi, ARM servers, etc.)
            args: '--target aarch64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # Android build
            args: 'android'
            android: true
          - platform: 'ubuntu-latest' # Flatpak build
            args: 'flatpak'
            flatpak: true
           
    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: set_var_win
        if: matrix.settings.platform == 'windows-latest'
        run: |
          choco install jq -y
      - id: set_var
        shell: bash
        run: |
          echo "VERSION_JSON=$(jq -c . < version.json)" >> $GITHUB_ENV
      - name: install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-latest' && !matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # ARM Linux cross-compilation dependencies
          if [[ "${{ matrix.settings.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            
            # Install pkg-config for cross-compilation
            sudo apt-get install -y pkg-config pkgconf
            # Add arm64 architecture for cross-compilation
            sudo dpkg --add-architecture arm64
            
            # Ubuntu 24.04 (noble)에 맞는 arm64 패키지 저장소 설정
            {
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted universe multiverse"
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted universe multiverse"
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-backports main restricted universe multiverse"
              # security 저장소는 ports에서 제공하지 않으므로 제외
            } | sudo tee /etc/apt/sources.list.d/arm64.list > /dev/null
            
            # 기존 sources.list에서 security 저장소의 arm64 참조 제거
            sudo sed -i '/security.ubuntu.com.*arm64/d' /etc/apt/sources.list
            
            # Update package lists (오류 무시하고 계속 진행)
            sudo apt-get update || true
            
            # Install essential ARM64 development libraries (사용 가능한 것만 설치)
            packages_to_install=(
              libglib2.0-dev:arm64
              libgtk-3-dev:arm64
              libwebkit2gtk-4.1-dev:arm64
              libappindicator3-dev:arm64
              librsvg2-dev:arm64
              libgobject-introspection-1.0-dev:arm64
              libcairo2-dev:arm64
              libpango1.0-dev:arm64
              libgdk-pixbuf-2.0-dev:arm64
              libatk1.0-dev:arm64
            )
            
            for package in "${packages_to_install[@]}"; do
              echo "Attempting to install $package..."
              sudo apt-get install -y --no-install-recommends "$package" || echo "Failed to install $package, continuing..."
            done
          fi
      - name: setup java (android only)
        if: matrix.settings.android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: setup android sdk (android only)
        if: matrix.settings.android
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          log-accepted-android-sdk-licenses: false
      - name: install android ndk and setup (android only)
        if: matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
      - name: setup flatpak (flatpak only)
        if: matrix.settings.flatpak
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.freedesktop.Sdk.Extension.rust-stable//23.08 org.freedesktop.Sdk.Extension.node20//23.08
          # DNS 설정 개선 (Flatpak 빌드용)
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          # npm 레지스트리 연결 테스트
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 10
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.settings.android && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || (contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'aarch64-unknown-linux-gnu' || '')) }}
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: configure dns and network settings (linux/macos only)
        if: matrix.settings.platform != 'windows-latest'
        run: |
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
      - name: install frontend dependencies
        shell: bash
        run: |
          for i in {1..3}; do
            echo "Attempt $i: Installing frontend dependencies..."
            if pnpm install --no-frozen-lockfile; then
              echo "Successfully installed dependencies on attempt $i"
              break
            else
              echo "Attempt $i failed, waiting 30 seconds before retry..."
              sleep 30
              if [ $i -eq 3 ]; then
                echo "All attempts failed, exiting..."
                exit 1
              fi
            fi
          done
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: add android rust targets
        if: matrix.settings.android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
      - name: setup arm linux cross compilation
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          rustup target add aarch64-unknown-linux-gnu
          
          # ARM Linux 크로스 컴파일 도구 설치 (오류 무시)
          sudo apt-get install -y pkg-config-aarch64-linux-gnu || echo "pkg-config-aarch64-linux-gnu not available"
          
          # pkg-config wrapper 스크립트 생성 (echo 방법)
          sudo bash -c 'echo "#!/bin/bash" > /usr/bin/aarch64-linux-gnu-pkg-config'
          sudo bash -c 'echo "export PKG_CONFIG_PATH=\"/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig\"" >> /usr/bin/aarch64-linux-gnu-pkg-config'
          sudo bash -c 'echo "export PKG_CONFIG_LIBDIR=\"/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig\"" >> /usr/bin/aarch64-linux-gnu-pkg-config'
          sudo bash -c 'echo "export PKG_CONFIG_SYSROOT_DIR=\"/usr/aarch64-linux-gnu\"" >> /usr/bin/aarch64-linux-gnu-pkg-config'
          sudo bash -c 'echo "exec pkg-config \"\$@\"" >> /usr/bin/aarch64-linux-gnu-pkg-config'
          sudo chmod +x /usr/bin/aarch64-linux-gnu-pkg-config
          
          # 환경변수 설정
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP_aarch64_unknown_linux_gnu=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L /usr/lib/aarch64-linux-gnu -L /usr/aarch64-linux-gnu/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-pkg-config" >> $GITHUB_ENV
          
          # 설치 확인 및 디버그 정보
          which aarch64-linux-gnu-pkg-config
          aarch64-linux-gnu-pkg-config --version
          echo "Testing glib-2.0 detection:"
          aarch64-linux-gnu-pkg-config --libs --cflags glib-2.0 || echo "glib-2.0 detection failed"
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/ | head -10
      - uses: tauri-apps/tauri-action@v0.5.16
        if: ${{ !matrix.settings.flatpak && !matrix.settings.android }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: 'v__VERSION__'
          releaseName: 'v__VERSION__'
          releaseBody: 'Release of v__VERSION__'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.settings.args }}
          tauriScript: "pnpm tauri"
      - name: build android
        if: matrix.settings.android
        run: |
          pnpm tauri android init
          pnpm tauri android build
      - name: sign android apk
        if: matrix.settings.android
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_FILE" | base64 -d > keystore.jks
          mkdir -p android-build
          for apk in $(find src-tauri/gen/android -name "*.apk"); do
            apk_name=$(basename "$apk" .apk)
            signed_apk="android-build/${apk_name}-signed.apk"
            BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools/ | sort -V | tail -n 1)
            APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner"
            if [ -f "$APKSIGNER" ] && [ -x "$APKSIGNER" ]; then
              echo "Using apksigner: $APKSIGNER"
              $APKSIGNER sign \
                --ks keystore.jks \
                --ks-pass pass:"$KEYSTORE_PASSWORD" \
                --ks-key-alias "$KEY_ALIAS" \
                --key-pass pass:"$KEY_PASSWORD" \
                --out "$signed_apk" \
                "$apk"
            else
              echo "apksigner not found, falling back to jarsigner"
              jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
                -keystore keystore.jks \
                -storepass "$KEYSTORE_PASSWORD" \
                -keypass "$KEY_PASSWORD" \
                "$apk" "$KEY_ALIAS"
              if [ -f "$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign" ]; then
                $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign -v 4 "$apk" "$signed_apk"
              else
                cp "$apk" "$signed_apk"
              fi
            fi
            echo "Signed APK: $signed_apk"
          done
          rm -f keystore.jks
          find src-tauri/gen/android -name "*.apk" -exec cp {} android-build/ \; || true
      - name: upload android artifacts
        if: matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android-build/
      - name: build flatpak
        if: matrix.settings.flatpak
        run: |
          # 매니페스트에서 --share=network를 설정했으므로 샌드박스 사용 가능
          flatpak-builder --force-clean --repo=repo --ccache --mirror-screenshots-url=https://dl.flathub.org/media/ --install-deps-from=flathub build-dir co.aiclient.risu.yml
          flatpak build-bundle repo risuai.flatpak co.aiclient.risu
          mkdir -p flatpak-build
          mv risuai.flatpak flatpak-build/
      - name: upload flatpak artifact
        if: matrix.settings.flatpak
        uses: actions/upload-artifact@v4
        with:
          name: flatpak
          path: flatpak-build/