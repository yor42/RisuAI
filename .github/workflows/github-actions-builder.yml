name: 'publish'
on:
  push:
    branches:
      - production
  workflow_dispatch: {}

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [ubuntu-latest,macos-latest,windows-latest]
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-22.04' # ARM Linux support (Raspberry Pi, ARM servers, etc.) - using 22.04 to avoid Noble ARM64 repo issues
            args: '--target aarch64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # Android build
            args: 'android'
            android: true

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: set_var_win
        if: matrix.settings.platform == 'windows-latest'
        run: |
          choco install jq -y
      - id: set_var
        shell: bash
        run: |
          echo "VERSION_JSON=$(jq -c . < version.json)" >> $GITHUB_ENV
          
          # 버전-날짜-시간 형태의 릴리즈 태그 생성
          TAURI_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          BUILD_DATE=$(date +'%Y%m%d')
          BUILD_TIME=$(date +'%H%M%S')
          RELEASE_TAG="${TAURI_VERSION}-${BUILD_DATE}-${BUILD_TIME}"
          
          echo "TAURI_VERSION=$TAURI_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          
          echo "Generated release tag: $RELEASE_TAG"
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      - name: install dependencies (ubuntu amd64 only)
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android && !matrix.settings.flatpak && !contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          # AMD64 빌드용 의존성 설치
          echo "=== Ubuntu AMD64 Build Environment ==="
          lsb_release -a
          
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install dependencies (ubuntu arm64 cross-compilation)
        if: startsWith(matrix.settings.platform, 'ubuntu') && contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          # ARM64 크로스컴파일 환경 설정
          echo "=== Ubuntu ARM64 Cross-compilation Environment ==="
          lsb_release -a
          
          # 저장소 접근 테스트 (ports.ubuntu.com만)
          echo "=== Repository Access Test ==="
          UBUNTU_CODENAME=$(lsb_release -cs)
          curl -I http://ports.ubuntu.com/ubuntu-ports/dists/$UBUNTU_CODENAME/main/binary-arm64/Packages || echo "ARM64 ports repo test failed"
          
          # 패키지 충돌 방지
          echo "=== Preventing Package Conflicts ==="
          if dpkg -l | grep -q "pkg-config"; then
            echo "Removing existing pkg-config to avoid conflicts..."
            sudo apt-get remove -y pkg-config pkg-config:arm64 || true
            sudo apt-get autoremove -y || true
          fi
          
          # ARM64 아키텍처 추가
          sudo dpkg --add-architecture arm64
          
          # 기존 저장소를 AMD64/i386로 제한
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
          sudo sed -i 's/^deb /deb [arch=amd64,i386] /' /etc/apt/sources.list
          sudo sed -i 's/^deb-src /deb-src [arch=amd64,i386] /' /etc/apt/sources.list
          
          # ARM64 전용 ports 저장소 추가 (security 포함)
          echo "=== Configuring ARM64 Repositories ==="
          sudo tee /etc/apt/sources.list.d/arm64-ports.list > /dev/null << EOF
          # ARM64 전용 ports 저장소 (security 포함)
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-security main restricted universe multiverse
          EOF
          
          echo "ARM64 repository configuration:"
          cat /etc/apt/sources.list.d/arm64-ports.list
          
          # 패키지 목록 업데이트
          sudo apt-get update
          
          # 기본 의존성 설치 (AMD64)
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
          # pkgconf 및 jq 설치
          sudo apt-get install -y pkgconf jq
          
          # ARM64 라이브러리 설치 (빌드 메시지 추천 패키지 포함)
          echo "=== Installing ARM64 Libraries ==="
          arm64_packages=(
            "libglib2.0-dev:arm64"
            "libgtk-3-dev:arm64"
            "libgdk-pixbuf-2.0-dev:arm64"
            "libcairo2-dev:arm64"
            "libpango1.0-dev:arm64"
            "libatk1.0-dev:arm64"
            "libwebkit2gtk-4.1-dev:arm64"
            "libappindicator3-dev:arm64"
            "librsvg2-dev:arm64"
          )
          
          # 정확한 Ubuntu 패키지명으로 GDK 3.0 설치
          echo "=== Installing Correct GDK 3.0 Packages ==="
          # Ubuntu에서 gdk-3.0.pc는 libgtk-3-dev에 포함됨
          gdk_packages=(
            "libgtk-3-dev:arm64"  # 이미 위에서 설치되지만 확실하게
          )
          
          # pkg-config에서 필요한 경우 직접 검색하여 설치
          echo "Checking for GDK 3.0 in existing packages..."
          if ! pkgconf --exists gdk-3.0 2>/dev/null; then
            echo "GDK 3.0 not found, installing additional packages..."
            additional_gdk_packages=(
              "pkg-config:arm64"
              "pkgconf:arm64"
            )
          else
            echo "GDK 3.0 already available"
          fi
          
          # 기본 ARM64 패키지 설치
          for package in "${arm64_packages[@]}"; do
            echo "Installing $package..."
            sudo apt-get install -y --no-install-recommends "$package" || {
              echo "Failed to install $package, continuing..."
            }
          done
          
          # 의존성 상태 최종 확인
          echo "=== Final Dependency Status Check ==="
          echo "Installed ARM64 packages:"
          dpkg -l | grep :arm64 | grep -E "(gtk|gdk|cairo|pango)" || echo "No GTK-related ARM64 packages found"
          
          # pkg-config 파일 상세 확인
          echo "=== Final pkg-config Verification ==="
          echo "Available pkg-config files in ARM64:"
          find /usr/lib/aarch64-linux-gnu/pkgconfig -name "*.pc" 2>/dev/null | head -10 || echo "No pkg-config files found"
          echo "GDK related files:"
          find /usr/lib/aarch64-linux-gnu/pkgconfig -name "*gdk*" 2>/dev/null || echo "No GDK pkg-config files"
          find /usr/lib/aarch64-linux-gnu/pkgconfig -name "*gtk*" 2>/dev/null || echo "No GTK pkg-config files"
          echo "Testing basic pkg-config functionality:"
          pkgconf --exists glib-2.0 && echo "✅ GLib 2.0 available" || echo "❌ GLib 2.0 not available"
          pkgconf --exists cairo && echo "✅ Cairo available" || echo "❌ Cairo not available"
          pkgconf --exists pango && echo "✅ Pango available" || echo "❌ Pango not available"
          pkgconf --exists gdk-3.0 && echo "✅ GDK 3.0 available" || echo "❌ GDK 3.0 NOT available (expected if dependencies failed)"
          
          echo "ARM64 cross-compilation environment setup completed"
      - name: setup java (android only)
        if: matrix.settings.android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: setup android sdk (android only)
        if: matrix.settings.android
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          log-accepted-android-sdk-licenses: false
      - name: install android ndk and setup (android only)
        if: matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
      - name: setup flatpak (Linux builds)
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          
          # 아키텍처 설정
          if [[ "${{ matrix.settings.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            echo "=== Setting up ARM64 Flatpak build ==="
            FLATPAK_ARCH="aarch64"
            # ARM64는 AMD64 환경에서만 빌드하므로 cross-compilation 접근
            echo "ARM64 Flatpak will be built using cross-compilation on AMD64"
          else
            echo "=== Setting up AMD64 Flatpak build ==="
            FLATPAK_ARCH="x86_64"
          fi
          
          echo "FLATPAK_ARCH=$FLATPAK_ARCH" >> $GITHUB_ENV
          
          # Flathub 저장소 추가
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          
          # 아키텍처에 관계없이 기본 런타임만 설치 (AMD64)
          echo "Installing base Flatpak runtime and SDK..."
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 || echo "Platform installation failed, continuing..."
          sudo flatpak install -y flathub org.freedesktop.Sdk//23.08 || echo "SDK installation failed, continuing..."
          sudo flatpak install -y flathub org.freedesktop.Sdk.Extension.rust-nightly//23.08 || echo "Rust extension installation failed, continuing..."
          sudo flatpak install -y flathub org.freedesktop.Sdk.Extension.node20//23.08 || echo "Node extension installation failed, continuing..."
          
          # ARM64의 경우 QEMU 설정 추가
          if [[ "$FLATPAK_ARCH" == "aarch64" ]]; then
            echo "=== Setting up QEMU for ARM64 emulation ==="
            sudo apt-get install -y qemu-user-static binfmt-support
            sudo systemctl restart systemd-binfmt || true
          fi
          
          # DNS 설정 개선
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
      - name: install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !startsWith(matrix.settings.platform, 'ubuntu') || matrix.settings.android }}
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.settings.android && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || '') }}
      - name: install Rust nightly (Linux builds for Flatpak compatibility)
        uses: dtolnay/rust-toolchain@nightly
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        with:
          targets: ${{ contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'aarch64-unknown-linux-gnu' || 'x86_64-unknown-linux-gnu' }}
      - name: Rust diagnostic
        run: |
          echo "=== Rust Toolchain Diagnostic ==="
          rustc --version
          cargo --version
          rustup show
          echo "=== Dependency Tree Analysis ==="
          cd src-tauri
          cargo tree --format "{p} {f}" | grep -E "(base64ct|edition)" || echo "No edition-related dependencies found"
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          # pnpm store path가 실패할 경우를 대비한 안전한 방법
          if command -v pnpm >/dev/null 2>&1; then
            STORE_PATH=$(pnpm store path 2>/dev/null || echo "")
            if [ -z "$STORE_PATH" ] || [ ! -d "$STORE_PATH" ]; then
              # 기본 pnpm store 경로 사용
              case "${{ runner.os }}" in
                Windows)
                  STORE_PATH="$HOME/AppData/Local/pnpm/store"
                  ;;
                macOS)
                  STORE_PATH="$HOME/Library/pnpm/store"
                  ;;
                Linux)
                  STORE_PATH="$HOME/.local/share/pnpm/store"
                  ;;
              esac
            fi
          else
            # pnpm이 없는 경우 기본 경로 설정
            case "${{ runner.os }}" in
              Windows)
                STORE_PATH="$HOME/AppData/Local/pnpm/store"
                ;;
              macOS)
                STORE_PATH="$HOME/Library/pnpm/store"
                ;;
              Linux)
                STORE_PATH="$HOME/.local/share/pnpm/store"
                ;;
            esac
          fi
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_OUTPUT
          echo "Using pnpm store path: $STORE_PATH"
      - uses: actions/cache@v4
        name: Setup pnpm cache
        continue-on-error: true
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            ${{ runner.os }}-pnpm-
      - name: configure dns and network settings (linux/macos only)
        if: startsWith(matrix.settings.platform, 'ubuntu') || matrix.settings.platform == 'macos-latest'
        run: |
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
      - name: install frontend dependencies
        shell: bash
        run: |
          # pnpm 설치 확인
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found, installing via corepack..."
            corepack enable
            corepack prepare pnpm@latest --activate
          fi
          
          # pnpm 버전 확인
          echo "pnpm version: $(pnpm --version)"
          
          for i in {1..3}; do
            echo "Attempt $i: Installing frontend dependencies..."
            if pnpm install --no-frozen-lockfile; then
              echo "Successfully installed dependencies on attempt $i"
              break
            else
              echo "Attempt $i failed, waiting 30 seconds before retry..."
              sleep 30
              if [ $i -eq 3 ]; then
                echo "All attempts failed, exiting..."
                exit 1
              fi
            fi
          done
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: add android rust targets
        if: matrix.settings.android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
      - name: setup arm linux cross compilation
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          rustup target add aarch64-unknown-linux-gnu
          
          # ARM64 크로스 컴파일 도구 개별 설치 (의존성 문제 해결)
          sudo apt-get update
          
          # 기본 크로스 컴파일 도구 설치 (pkgconf 사용)
          echo "Installing ARM64 cross-compilation toolchain..."
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross
          
          # pkgconf 확인 및 설치 (이미 설치되어 있으면 스킵)
          if ! command -v pkgconf >/dev/null 2>&1; then
            echo "Installing pkgconf..."
            sudo apt-get install -y pkgconf || {
              echo "pkgconf installation failed, removing conflicting packages..."
              sudo apt-get remove -y pkg-config || true
              sudo apt-get install -y pkgconf
            }
          else
            echo "pkgconf already available"
          fi
          
          # ARM64 아키텍처 추가
          sudo dpkg --add-architecture arm64
          
          # ARM64 패키지 저장소 설정
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          
          # 패키지 목록 업데이트 (오류 무시)
          sudo apt-get update || true
          
          # 필수 ARM64 개발 라이브러리 설치 (오류 무시하고 계속)
          essential_packages=(
            "libglib2.0-dev:arm64"
            "libgtk-3-dev:arm64"
            "libwebkit2gtk-4.1-dev:arm64"
            "libappindicator3-dev:arm64"
            "librsvg2-dev:arm64"
          )
          
          for package in "${essential_packages[@]}"; do
            echo "Attempting to install $package..."
            sudo apt-get install -y --no-install-recommends --fix-broken "$package" || {
              echo "Failed to install $package, trying alternative approach..."
              sudo apt-get install -y --no-install-recommends "$package" --ignore-missing || echo "Skipping $package due to dependency issues"
            }
          done
          
          # 환경변수 설정
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP_aarch64_unknown_linux_gnu=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L /usr/lib/aarch64-linux-gnu -L /usr/aarch64-linux-gnu/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV
          
          # 크로스 컴파일 도구 확인
          echo "Cross-compilation tools verification:"
          which aarch64-linux-gnu-gcc && aarch64-linux-gnu-gcc --version || echo "gcc not found"
          which aarch64-linux-gnu-g++ && aarch64-linux-gnu-g++ --version || echo "g++ not found"
          
          # 의존성 문제가 있어도 빌드 계속 진행
          echo "Cross-compilation environment setup completed with available tools"
      - name: prepare ARM64 build configuration
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          echo "=== Preparing ARM64 build configuration ==="
          
          # 원본 파일들 백업
          cp src-tauri/Cargo.toml src-tauri/Cargo.toml.backup
          cp src-tauri/tauri.conf.json src-tauri/tauri.conf.json.backup
          echo "✅ Original files backed up"
          
          # ARM64용 파일들이 존재하는지 확인하고 교체
          if [ -f "src-tauri/Cargo.arm64.toml" ] && [ -f "src-tauri/tauri.conf.arm64.json" ]; then
            echo "📁 Dedicated ARM64 configuration files found, applying..."
            cp src-tauri/Cargo.arm64.toml src-tauri/Cargo.toml
            cp src-tauri/tauri.conf.arm64.json src-tauri/tauri.conf.json
            echo "✅ ARM64 configuration files applied from dedicated files"
            
            # ARM64 capability 파일 생성 (필요한 경우)
            if [ ! -f "src-tauri/capabilities/desktop-arm.json" ]; then
              echo "📄 Creating desktop-arm capability file..."
              mkdir -p src-tauri/capabilities
              cat > src-tauri/capabilities/desktop-arm.json << 'EOF'
          {
            "identifier": "desktop-arm-capability",
            "platforms": [
              "macOS",
              "windows", 
              "linux"
            ],
            "permissions": [
              "process:default",
              "shell:default",
              "http:default",
              "deep-link:default"
            ]
          }
          EOF
              echo "✅ Created desktop-arm capability file"
            fi
            
          else
            echo "⚠️ Dedicated ARM64 configuration files not found, creating them..."
            
            # Cargo.toml 생성 (updater 제외)
            echo "🔧 Creating ARM64-specific Cargo.toml..."
            cat > src-tauri/Cargo.toml << 'EOF'
          [package]
          name = "risuai"
          version = "0.0.0"
          description = "A Tauri App"
          authors = ["you"]
          license = ""
          repository = ""
          edition = "2021"
          
          [build-dependencies]
          tauri-build = { version = "2.2.0", features = [] }
          
          [dependencies]
          tauri = { version = "2.5.1", features = ["protocol-asset"] }
          serde_json = "1.0"
          tiktoken-rs = "0.4.0"
          base64 = "0.21.0"
          reqwest = { version = "0.11.16", features = ["json", "rustls-tls"], default-features = false }
          darling = "0.20.3"
          zip = "0.6.6"
          tar = "0.4.40"
          eventsource-client = "0.12.2"
          futures = "0.3.30"
          url = "2.2"
          uuid = { version = "1.9.1", features = [ "v4" ] }
          tauri-plugin-fs = "2.2.1"
          tauri-plugin-os = "2.2.1"
          tauri-plugin-dialog = "2.2.1"
          tauri-plugin-process = "2.2.1"
          tauri-plugin-shell = "2.2.1"
          tauri-plugin-http = "2.4.3"
          
          [target."cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))".dependencies]
          tauri-plugin-deep-link = "2.2.1"
          
          [target.'cfg(all(not(any(target_os = "android", target_os = "ios")), not(target_arch = "aarch64")))'.dependencies]
          tauri-plugin-single-instance = { version = "2.2.3", features = ["deep-link"] }
          # updater는 non-ARM64에서만 활성화
          
          [target.'cfg(all(not(any(target_os = "android", target_os = "ios")), target_arch = "aarch64"))'.dependencies]
          tauri-plugin-single-instance = { version = "2.2.3", features = ["deep-link"] }
          # ARM64에서는 updater 제외
          
          [features]
          custom-protocol = ["tauri/custom-protocol"]
          
          [lib]
          name = "risuai"
          crate-type = ["staticlib", "cdylib", "rlib"]
          EOF
            
            # tauri.conf.json 수정 (기존 파일 기반으로 updater 제거)
            echo "🔧 Modifying tauri.conf.json for ARM64..."
            if command -v jq >/dev/null 2>&1; then
              # jq가 있는 경우 JSON 파싱으로 정확하게 수정
              echo "Using jq to modify tauri.conf.json..."
              jq '
                del(.plugins.updater) |
                .bundle.createUpdaterArtifacts = false |
                .build.beforeBuildCommand = "VITE_DISABLE_UPDATER=true pnpm build" |
                .bundle.targets = ["deb", "rpm"] |
                .app.security.capabilities = ["desktop-arm-capability", "mobile-capability", "migrated"]
              ' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && \
              mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
              echo "✅ Used jq to modify tauri.conf.json for ARM64"
            else
              # Node.js로 JSON 처리
              echo "Using Node.js to modify tauri.conf.json..."
              node -e "
                const fs = require('fs');
                const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
                
                // updater 관련 설정 제거
                if (config.plugins && config.plugins.updater) {
                  delete config.plugins.updater;
                }
                if (config.tauri && config.tauri.updater) {
                  delete config.tauri.updater;
                }
                
                // ARM64 전용 설정 적용
                if (!config.bundle) config.bundle = {};
                config.bundle.createUpdaterArtifacts = false;
                config.bundle.targets = ['deb', 'rpm'];
                
                if (!config.build) config.build = {};
                config.build.beforeBuildCommand = 'VITE_DISABLE_UPDATER=true pnpm build';
                
                // capabilities 설정
                if (!config.app) config.app = {};
                if (!config.app.security) config.app.security = {};
                config.app.security.capabilities = ['desktop-arm-capability', 'mobile-capability', 'migrated'];
                
                fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2));
                console.log('✅ Successfully modified tauri.conf.json for ARM64');
              " || echo "⚠️ Node.js JSON modification failed, using original file"
            fi
            
            # Capability 파일들 생성
            echo "📄 Creating necessary capability files..."
            mkdir -p src-tauri/capabilities
            
            # desktop-arm-capability
            cat > src-tauri/capabilities/desktop-arm.json << 'EOF'
          {
            "identifier": "desktop-arm-capability",
            "platforms": [
              "macOS",
              "windows",
              "linux"
            ],
            "permissions": [
              "process:default",
              "shell:default", 
              "http:default",
              "deep-link:default"
            ]
          }
          EOF
            
            # mobile-capability 
            cat > src-tauri/capabilities/mobile.json << 'EOF'
          {
            "identifier": "mobile-capability",
            "platforms": [
              "android",
              "iOS"
            ],
            "permissions": [
              "core:default",
              "fs:default",
              "fs:allow-read-file",
              "fs:allow-write-file",
              "fs:allow-read-dir",
              "fs:allow-copy-file",
              "fs:allow-mkdir",
              "fs:allow-remove",
              "fs:allow-rename",
              "fs:allow-exists",
              {
                "identifier": "fs:scope",
                "allow": [
                  "$APPDATA",
                  "$APPDATA/*",
                  "$APPDATA/**/*",
                  "$DOWNLOAD/*",
                  "/data/**/*",
                  "$RESOURCE/*"
                ]
              },
              "dialog:default",
              "dialog:allow-open",
              "dialog:allow-save",
              "dialog:allow-message",
              "dialog:allow-ask",
              "dialog:allow-confirm",
              "http:default",
              {
                "identifier": "http:default",
                "allow": [
                  {
                    "url": "https://*/*"
                  },
                  {
                    "url": "https://*/**/*"
                  },
                  {
                    "url": "http://*/*"
                  },
                  {
                    "url": "http://*/**/*"
                  },
                  {
                    "url": "http://*:**"
                  }
                ]
              },
              "os:default",
              "os:allow-platform",
              "os:allow-version",
              "os:allow-os-type",
              "os:allow-family",
              "os:allow-arch",
              "os:allow-exe-extension",
              "os:allow-locale",
              "os:allow-hostname",
              "process:default",
              "shell:default",
              "shell:allow-open"
            ]
          }
          EOF
            
            echo "✅ ARM64 configuration created from scratch"
          fi
          
          # 설정 적용 확인
          echo "=== Verifying ARM64 configuration changes ==="
          echo "📋 Checking Cargo.toml for updater dependencies:"
          if grep -v "^\s*#" src-tauri/Cargo.toml | grep -q "tauri-plugin-updater"; then
            echo "❌ Active updater dependencies still found:"
            grep -v "^\s*#" src-tauri/Cargo.toml | grep -n "tauri-plugin-updater"
            echo "🔧 This may cause build issues, but continuing..."
          else
            echo "✅ No active updater dependencies found in Cargo.toml"
          fi
          
          echo "📋 Checking tauri.conf.json updater settings:"
          if command -v jq >/dev/null 2>&1; then
            UPDATER_PLUGIN=$(jq -r '.plugins.updater // "null"' src-tauri/tauri.conf.json)
            CREATE_ARTIFACTS=$(jq -r '.bundle.createUpdaterArtifacts // "null"' src-tauri/tauri.conf.json)
            echo "  updater plugin: $UPDATER_PLUGIN"
            echo "  createUpdaterArtifacts: $CREATE_ARTIFACTS"
            if [ "$UPDATER_PLUGIN" = "null" ] && [ "$CREATE_ARTIFACTS" = "false" ]; then
              echo "✅ tauri.conf.json properly configured for ARM64"
            else
              echo "⚠️ tauri.conf.json may still have updater settings"
            fi
          else
            echo "  (jq not available for detailed JSON verification)"
          fi
          
          echo "📋 ARM64-specific lines in Cargo.toml:"
          grep -n -A2 -B2 "aarch64" src-tauri/Cargo.toml || echo "No ARM64-specific configuration found"
          
          # 완전한 의존성 초기화 (ARM Linux 크로스 컴파일용)
          echo "=== Complete dependency cleanup for ARM64 cross-compilation ==="
          
          # 현재 디렉토리 확인
          echo "Current directory: $(pwd)"
          echo "Contents: $(ls -la src-tauri/ | head -5)"
          
          cd src-tauri
          echo "Changed to src-tauri directory: $(pwd)"
          
          # 1. 생성된 Tauri 파일 완전 제거 (가장 먼저 실행)
          echo "=== Forcefully cleaning all generated Tauri files ==="
          if [ -d "gen" ]; then
            echo "Found gen directory, removing..."
            rm -rf gen/
            echo "Removed gen directory"
          else
            echo "No gen directory found"
          fi
          
          # 2. Cargo 빌드 캐시 완전 제거
          echo "=== Cleaning Cargo build cache ==="
          cargo clean --release --target-dir target
          
          # 3. target 디렉토리 완전 삭제
          rm -rf target/ || echo "target directory already clean"
          
          # 4. Cargo.lock 파일 제거
          rm -f Cargo.lock || echo "Cargo.lock already removed"
          
          # 5. 새로운 의존성 트리 생성
          echo "=== Generating fresh dependency tree for ARM64 ==="
          cargo update --verbose
          
          # 6. ARM64 타겟용 의존성 미리 다운로드
          echo "=== Pre-fetching ARM64 dependencies ==="
          cargo fetch --target aarch64-unknown-linux-gnu || echo "Pre-fetch completed with warnings"
          
          # 7. 최종 의존성 상태 확인
          echo "=== Final dependency status verification ==="
          echo "Cargo.lock exists: $(test -f Cargo.lock && echo 'Yes' || echo 'No (will be generated)')"
          echo "Target directory: $(test -d target && echo 'Exists' || echo 'Clean')"
          echo "Generated schemas: $(test -d gen && echo 'Exists' || echo 'Cleaned - will be regenerated')"
          
          # 8. 최종 Cargo.toml 파일 확인
          echo "=== Final Cargo.toml verification ==="
          if [ -f "Cargo.toml" ]; then
            echo "✅ Cargo.toml exists"
            # updater 의존성 검사
            if grep -v "^\s*#" Cargo.toml | grep -q "tauri-plugin-updater"; then
              echo "❌ Active updater dependency still found!"
              grep -v "^\s*#" Cargo.toml | grep -n "tauri-plugin-updater"
              echo "🔧 This will cause build failures on ARM64, but continuing..."
            else
              echo "✅ No active updater dependencies found - ARM64 build should succeed"
            fi
          else
            echo "❌ Cargo.toml not found!"
            ls -la
          fi
          
          echo "✅ ARM64 dependency cleanup completed"
      # Modified tauri-action step - no longer creates releases
      - uses: tauri-apps/tauri-action@v0.5.16
        if: ${{ !matrix.settings.flatpak && !matrix.settings.android }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          VITE_DISABLE_UPDATER: ${{ contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'true' || 'false' }}
        with:
          # Don't include any release-related parameters to prevent release creation
          includeUpdaterJson: false
          args: ${{ contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && '--target aarch64-unknown-linux-gnu' || matrix.settings.args }}
          tauriScript: "pnpm tauri"
      - name: restore original files
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          echo "=== Restoring original configuration files ==="
          
          # 원본 Cargo.toml 복원
          if [ -f "src-tauri/Cargo.toml.backup" ]; then
            mv src-tauri/Cargo.toml.backup src-tauri/Cargo.toml
            echo "✅ Original Cargo.toml restored"
          else
            echo "❌ No Cargo.toml backup found"
          fi
          
          # 원본 tauri.conf.json 복원
          if [ -f "src-tauri/tauri.conf.json.backup" ]; then
            mv src-tauri/tauri.conf.json.backup src-tauri/tauri.conf.json
            echo "✅ Original tauri.conf.json restored"
          else
            echo "❌ No tauri.conf.json backup found"
          fi
      - name: upload build artifacts (non-flatpak, non-android)
        if: ${{ !matrix.settings.flatpak && !matrix.settings.android }}
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.settings.platform }}-${{ contains(matrix.settings.args, 'aarch64') && 'aarch64' || (contains(matrix.settings.args, 'x86_64') && 'x86_64' || 'universal') }}
          path: |
            src-tauri/target/*/release/RisuAI*
            src-tauri/target/*/release/risuai*
            src-tauri/target/*/release/bundle/
            src-tauri/target/*/release/*.exe
            src-tauri/target/*/release/*.app
            src-tauri/target/*/release/*.msi
            src-tauri/target/*/release/*.dmg
            src-tauri/target/*/release/*.deb
            src-tauri/target/*/release/*.rpm
            src-tauri/target/*/release/*.AppImage
          if-no-files-found: warn
      - name: create flatpak binary archive
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        run: |
          echo "=== Creating Flatpak Binary Archive ==="
          
          # 아키텍처별 바이너리 경로 확인
          if [[ "${{ matrix.settings.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            TARGET_DIR="src-tauri/target/aarch64-unknown-linux-gnu/release"
            ARCH_SUFFIX="aarch64"
          else
            TARGET_DIR="src-tauri/target/x86_64-unknown-linux-gnu/release"
            ARCH_SUFFIX="x86_64"
          fi
          
          # 바이너리 파일 확인
          if [ -f "$TARGET_DIR/RisuAI" ]; then
            BINARY_NAME="RisuAI"
          elif [ -f "$TARGET_DIR/risuai" ]; then
            BINARY_NAME="risuai"
          else
            echo "No binary found in $TARGET_DIR"
            exit 1
          fi
          
          echo "Found binary: $TARGET_DIR/$BINARY_NAME"
          
          # Flatpak용 바이너리 아카이브 생성
          mkdir -p flatpak-binaries
          
          # 임시 디렉토리에 필요한 파일들 복사
          mkdir -p temp-flatpak
          cp "$TARGET_DIR/$BINARY_NAME" temp-flatpak/RisuAI
          cp src-tauri/icons/128x128.png temp-flatpak/ 2>/dev/null || echo "128x128.png not found"
          cp src-tauri/icons/128x128@2x.png temp-flatpak/ 2>/dev/null || echo "128x128@2x.png not found"
          
          # 아카이브 생성
          tar -czf "flatpak-binaries/risuai-bin-${ARCH_SUFFIX}.tar.gz" -C temp-flatpak .
          
          # 정리
          rm -rf temp-flatpak
          
          echo "Created archive: flatpak-binaries/risuai-bin-${ARCH_SUFFIX}.tar.gz"
          tar -tzf "flatpak-binaries/risuai-bin-${ARCH_SUFFIX}.tar.gz"
      - name: upload flatpak binary archive
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-binaries-${{ contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'aarch64' || 'x86_64' }}
          path: flatpak-binaries/
      - name: build android
        if: matrix.settings.android
        run: |
          pnpm tauri android init
          pnpm tauri android build
      - name: sign android apk
        if: matrix.settings.android
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_FILE" | base64 -d > keystore.jks
          mkdir -p android-build
          for apk in $(find src-tauri/gen/android -name "*.apk"); do
            apk_name=$(basename "$apk" .apk)
            signed_apk="android-build/${apk_name}-signed.apk"
            BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools/ | sort -V | tail -n 1)
            APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner"
            if [ -f "$APKSIGNER" ] && [ -x "$APKSIGNER" ]; then
              echo "Using apksigner: $APKSIGNER"
              $APKSIGNER sign \
                --ks keystore.jks \
                --ks-pass pass:"$KEYSTORE_PASSWORD" \
                --ks-key-alias "$KEY_ALIAS" \
                --key-pass pass:"$KEY_PASSWORD" \
                --out "$signed_apk" \
                "$apk"
            else
              echo "apksigner not found, falling back to jarsigner"
              jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
                -keystore keystore.jks \
                -storepass "$KEYSTORE_PASSWORD" \
                -keypass "$KEY_PASSWORD" \
                "$apk" "$KEY_ALIAS"
              if [ -f "$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign" ]; then
                $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign -v 4 "$apk" "$signed_apk"
              else
                cp "$apk" "$signed_apk"
              fi
            fi
            echo "Signed APK: $signed_apk"
          done
          rm -f keystore.jks
          find src-tauri/gen/android -name "*.apk" -exec cp {} android-build/ \; || true
      - name: upload android artifacts
        if: matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android-build/
      - name: build flatpak (Linux builds)
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        run: |
          echo "=== Building Flatpak for $FLATPAK_ARCH architecture using pre-built binaries ==="
          
          # 아키텍처별 바이너리 아카이브 확인
          ARCHIVE_NAME="risuai-bin-${FLATPAK_ARCH}.tar.gz"
          if [ ! -f "flatpak-binaries/$ARCHIVE_NAME" ]; then
            echo "Binary archive not found: flatpak-binaries/$ARCHIVE_NAME"
            exit 1
          fi
          
          # 매니페스트에서 참조할 수 있도록 아카이브를 적절한 위치에 복사
          cp "flatpak-binaries/$ARCHIVE_NAME" "risuai-bin.tar.gz"
          
          # 아키텍처별 빌드 디렉토리 설정
          BUILD_DIR="build-dir-$FLATPAK_ARCH"
          REPO_DIR="repo-$FLATPAK_ARCH"
          OUTPUT_NAME="risuai-$FLATPAK_ARCH.flatpak"
          
          # Flatpak 매니페스트를 사용하여 빌드 (아키텍처별)
          if [[ "$FLATPAK_ARCH" == "aarch64" ]]; then
            echo "Building ARM64 Flatpak using pre-built binaries..."
            flatpak-builder --force-clean --repo=$REPO_DIR --ccache --install-deps-from=flathub --arch=aarch64 $BUILD_DIR co.aiclient.risu.yml
          else
            echo "Building AMD64 Flatpak using pre-built binaries..."
            flatpak-builder --force-clean --repo=$REPO_DIR --ccache --install-deps-from=flathub $BUILD_DIR co.aiclient.risu.yml
          fi
          
          # 저장소 상태 확인 및 디버깅
          echo "=== Repository verification ==="
          echo "Repository directory: $REPO_DIR"
          echo "Output name: $OUTPUT_NAME"
          echo "Architecture: $FLATPAK_ARCH"
          
          # 저장소에서 사용 가능한 앱 목록 확인
          flatpak --repo=$REPO_DIR list || echo "Failed to list repository contents"
          
          # 저장소에서 사용 가능한 브랜치 확인
          flatpak --repo=$REPO_DIR list --app --columns=name,branch,arch || echo "Failed to list app details"
          
          # 번들 생성 (브랜치 매개변수 제거 - 기본 브랜치 사용)
          echo "=== Creating Flatpak bundle ==="
          flatpak build-bundle $REPO_DIR $OUTPUT_NAME co.aiclient.risu
          
          # 아티팩트 디렉토리 생성 및 파일 이동
          mkdir -p flatpak-build
          mv $OUTPUT_NAME flatpak-build/
          
          echo "Flatpak build completed: flatpak-build/$OUTPUT_NAME"
      - name: upload flatpak artifact
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-${{ env.FLATPAK_ARCH }}
          path: flatpak-build/

  # New job to create a single pre-release with all build artifacts
  create-pre-release:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set release variables
        id: set_vars
        run: |
          TAURI_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          BUILD_DATE=$(date +'%Y%m%d')
          BUILD_TIME=$(date +'%H%M%S')
          RELEASE_TAG="${TAURI_VERSION}-${BUILD_DATE}-${BUILD_TIME}"
          
          echo "TAURI_VERSION=$TAURI_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          
          echo "Generated release tag: $RELEASE_TAG"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Display downloaded artifacts
        run: |
          echo "=== Downloaded Artifacts Structure ==="
          find ./artifacts -type f -name "*" | sort
          
          echo ""
          echo "=== Detailed Artifact Summary ==="
          for dir in ./artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "📁 Directory: $(basename "$dir")"
              file_count=$(find "$dir" -type f -name "*" | wc -l)
              echo "   Files: $file_count"
              
              # List specific file types
              echo "   📦 Package files:"
              find "$dir" -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.flatpak" -o -name "*.apk" \) | while read -r file; do
                echo "     - $(basename "$file")"
              done
              
              # Check for any other notable files
              echo "   📄 Other files:"
              find "$dir" -type f ! \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.flatpak" -o -name "*.apk" \) | while read -r file; do
                echo "     - $(basename "$file")"
              done | head -5  # Limit to first 5 to avoid spam
              
              echo ""
            fi
          done
          
          echo "=== Checking for ARM Flatpak specifically ==="
          if [ -d "./artifacts/flatpak-aarch64" ]; then
            echo "✅ ARM64 Flatpak artifact directory found"
            find "./artifacts/flatpak-aarch64" -name "*.flatpak" | while read -r file; do
              echo "  📦 ARM64 Flatpak: $(basename "$file")"
            done
          else
            echo "❌ ARM64 Flatpak artifact directory not found"
          fi
          
          if [ -d "./artifacts/flatpak-x86_64" ]; then
            echo "✅ AMD64 Flatpak artifact directory found"
            find "./artifacts/flatpak-x86_64" -name "*.flatpak" | while read -r file; do
              echo "  📦 AMD64 Flatpak: $(basename "$file")"
            done
          else
            echo "❌ AMD64 Flatpak artifact directory not found"
          fi
      
      - name: Organize release assets
        run: |
          echo "=== Organizing Release Assets ==="
          mkdir -p release-assets
          
          # Function to copy files with renamed pattern
          copy_and_rename() {
            local source_dir="$1"
            local arch_suffix="$2"
            local platform_name="$3"
            
            if [ -d "$source_dir" ]; then
              echo "Processing $source_dir for $platform_name ($arch_suffix)"
              
              # Copy various file types with architecture suffix
              # Also search in bundle subdirectories for .deb and .rpm files
              find "$source_dir" -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.flatpak" -o -name "*.apk" \) | while read -r file; do
                filename=$(basename "$file")
                extension="${filename##*.}"
                basename_no_ext="${filename%.*}"
                
                # Create new filename with architecture suffix
                new_filename="${basename_no_ext}-${arch_suffix}.${extension}"
                
                echo "  Copying: $filename -> $new_filename"
                cp "$file" "release-assets/$new_filename"
              done
              
              # Also check bundle directories specifically for Linux packages
              if [ -d "$source_dir/bundle" ]; then
                echo "  Checking bundle directory: $source_dir/bundle"
                find "$source_dir/bundle" -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) | while read -r file; do
                  filename=$(basename "$file")
                  extension="${filename##*.}"
                  basename_no_ext="${filename%.*}"
                  
                  # Create new filename with architecture suffix
                  new_filename="${basename_no_ext}-${arch_suffix}.${extension}"
                  
                  echo "  Copying from bundle: $filename -> $new_filename"
                  cp "$file" "release-assets/$new_filename"
                done
              fi
              
              # Recursively check all subdirectories for package files
              find "$source_dir" -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) -not -path "*/release-assets/*" | while read -r file; do
                # Skip if already processed
                if [[ "$file" != *"/release-assets/"* ]]; then
                  filename=$(basename "$file")
                  extension="${filename##*.}"
                  basename_no_ext="${filename%.*}"
                  
                  # Create new filename with architecture suffix
                  new_filename="${basename_no_ext}-${arch_suffix}.${extension}"
                  
                  # Only copy if not already exists
                  if [ ! -f "release-assets/$new_filename" ]; then
                    echo "  Copying from subdirectory: $filename -> $new_filename"
                    cp "$file" "release-assets/$new_filename"
                  fi
                fi
              done
            fi
          }
          
          # Process macOS builds
          copy_and_rename "./artifacts/build-macos-latest-aarch64" "macos-aarch64" "macOS ARM64"
          copy_and_rename "./artifacts/build-macos-latest-x86_64" "macos-x86_64" "macOS Intel"
          
          # Process Windows builds
          copy_and_rename "./artifacts/build-windows-latest-x86_64" "windows-x86_64" "Windows"
          
          # Process Linux builds
          copy_and_rename "./artifacts/build-ubuntu-latest-x86_64" "linux-x86_64" "Linux AMD64"
          copy_and_rename "./artifacts/build-ubuntu-22.04-aarch64" "linux-aarch64" "Linux ARM64"
          
          # Process Flatpak builds
          copy_and_rename "./artifacts/flatpak-x86_64" "flatpak-x86_64" "Flatpak AMD64"
          copy_and_rename "./artifacts/flatpak-aarch64" "flatpak-aarch64" "Flatpak ARM64"
          
          # Process Android builds
          copy_and_rename "./artifacts/android-apk" "android" "Android"
          
          echo "=== Final Release Assets ==="
          echo "📦 Total files prepared for release: $(find release-assets/ -type f | wc -l)"
          echo ""
          echo "📁 Release assets by category:"
          
          # macOS files
          macos_files=$(find release-assets/ -name "*-macos-*" | wc -l)
          if [ $macos_files -gt 0 ]; then
            echo "🍎 macOS ($macos_files files):"
            find release-assets/ -name "*-macos-*" -exec basename {} \; | sort | sed 's/^/   - /'
          fi
          
          # Windows files  
          windows_files=$(find release-assets/ -name "*-windows-*" | wc -l)
          if [ $windows_files -gt 0 ]; then
            echo "🪟 Windows ($windows_files files):"
            find release-assets/ -name "*-windows-*" -exec basename {} \; | sort | sed 's/^/   - /'
          fi
          
          # Linux files (excluding flatpak)
          linux_files=$(find release-assets/ -name "*-linux-*" ! -name "*flatpak*" | wc -l)
          if [ $linux_files -gt 0 ]; then
            echo "🐧 Linux packages ($linux_files files):"
            find release-assets/ -name "*-linux-*" ! -name "*flatpak*" -exec basename {} \; | sort | sed 's/^/   - /'
          fi
          
          # Flatpak files
          flatpak_files=$(find release-assets/ -name "*flatpak*" | wc -l)
          if [ $flatpak_files -gt 0 ]; then
            echo "📦 Flatpak ($flatpak_files files):"
            find release-assets/ -name "*flatpak*" -exec basename {} \; | sort | sed 's/^/   - /'
          fi
          
          # Android files
          android_files=$(find release-assets/ -name "*-android*" | wc -l)
          if [ $android_files -gt 0 ]; then
            echo "🤖 Android ($android_files files):"
            find release-assets/ -name "*-android*" -exec basename {} \; | sort | sed 's/^/   - /'
          fi
          
          echo ""
          echo "📋 Complete file list:"
          ls -la release-assets/ | grep -v "^total" | grep -v "^d" | awk '{print "   📄 " $9 " (" $5 " bytes)"}'
      
      - name: Create pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: 'RisuAI ${{ env.RELEASE_TAG }}'
          body: |
            # RisuAI Pre-release Build
            
            **Version:** ${{ env.TAURI_VERSION }}  
            **Build Date:** ${{ env.BUILD_DATE }}  
            **Build Time:** ${{ env.BUILD_TIME }}  
            
            This is an automated pre-release build containing binaries for all supported platforms and architectures.
            
            ## Supported Platforms
            
            ### Desktop Applications
            - **macOS**: ARM64 (Apple Silicon) and Intel (x86_64) - DMG installers
            - **Windows**: x86_64 - MSI installer
            - **Linux**: AMD64 (x86_64) and ARM64 (aarch64) - Multiple formats available
            
            ### Linux Package Formats
            - **AppImage**: Portable Linux application format (x86_64 and aarch64)
            - **DEB**: Debian/Ubuntu package format (x86_64 and aarch64)
            - **RPM**: Red Hat/Fedora package format (x86_64 and aarch64)
            - **Flatpak**: Universal Linux packaging format (x86_64 and aarch64)
            
            ### Mobile
            - **Android**: APK files (signed and unsigned)
            
            ## Installation Notes
            
            ### macOS
            - Download the appropriate DMG file for your architecture
            - `-macos-aarch64.dmg`: For Apple Silicon Macs (M1, M2, M3, etc.)
            - `-macos-x86_64.dmg`: For Intel Macs
            
            ### Windows
            - Download the MSI installer: `-windows-x86_64.msi`
            
            ### Linux
            Choose the format that works best for your distribution:
            - **AppImage** (Recommended for most users): Download, make executable, and run
            - **DEB packages**: For Debian, Ubuntu, and derivatives - `sudo dpkg -i filename.deb`
            - **RPM packages**: For Red Hat, Fedora, SUSE, and derivatives - `sudo rpm -i filename.rpm`
            - **Flatpak**: Universal format - `flatpak install filename.flatpak`
            
            ### Android
            - Download the APK file: `-android.apk`
            - Enable "Unknown sources" in Android settings if needed
            - Signed APKs are provided for secure installation
            
            ## File Naming Convention
            
            Files are named with architecture suffixes for easy identification:
            - `-macos-aarch64`: macOS Apple Silicon (ARM64)
            - `-macos-x86_64`: macOS Intel (x86_64)
            - `-windows-x86_64`: Windows 64-bit
            - `-linux-x86_64`: Linux AMD64
            - `-linux-aarch64`: Linux ARM64 (Raspberry Pi, ARM servers, etc.)
            - `-flatpak-x86_64`: Flatpak for AMD64 systems
            - `-flatpak-aarch64`: Flatpak for ARM64 systems
            - `-android`: Android APK
            
            ## Architecture Support Summary
            
            | Platform | x86_64/AMD64 | ARM64/aarch64 |
            |----------|--------------|---------------|
            | macOS    | ✅ DMG       | ✅ DMG        |
            | Windows  | ✅ MSI       | ❌            |
            | Linux    | ✅ DEB/RPM/AppImage/Flatpak | ✅ DEB/RPM/AppImage/Flatpak |
            | Android  | ✅ APK       | ✅ APK        |
          draft: false
          prerelease: true
          files: release-assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean up artifacts
        if: always()
        run: |
          echo "=== Cleaning up temporary files ==="
          rm -rf ./artifacts
          rm -rf ./release-assets
          echo "Cleanup completed"
