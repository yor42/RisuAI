name: 'publish'
on:
  push:
    branches:
      - production
  workflow_dispatch: {}

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [ubuntu-latest,macos-latest,windows-latest]
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-22.04' # ARM Linux support (Raspberry Pi, ARM servers, etc.) - using 22.04 to avoid Noble ARM64 repo issues
            args: '--target aarch64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # Android build
            args: 'android'
            android: true
          - platform: 'ubuntu-latest' # Flatpak build
            args: 'flatpak'
            flatpak: true
           
    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: set_var_win
        if: matrix.settings.platform == 'windows-latest'
        run: |
          choco install jq -y
      - id: set_var
        shell: bash
        run: |
          echo "VERSION_JSON=$(jq -c . < version.json)" >> $GITHUB_ENV
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.settings.platform, 'ubuntu') && !matrix.settings.android && !matrix.settings.flatpak
        run: |
          # 진단: Ubuntu 버전 및 ARM64 저장소 상태 확인
          echo "=== Ubuntu Version & Architecture Diagnostic ==="
          lsb_release -a
          uname -a
          dpkg --print-architecture
          dpkg --print-foreign-architectures
          
          # 진단: 저장소 접근 가능성 테스트
          echo "=== Repository Access Test ==="
          UBUNTU_CODENAME=$(lsb_release -cs)
          curl -I https://security.ubuntu.com/ubuntu/dists/$UBUNTU_CODENAME/main/binary-arm64/Packages || echo "ARM64 security repo failed"
          curl -I http://ports.ubuntu.com/ubuntu-ports/dists/$UBUNTU_CODENAME/main/binary-arm64/Packages || echo "ARM64 ports repo failed"
          
          sudo apt-get update
          
          # 기본 의존성 설치
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
          # ARM Linux cross-compilation dependencies (조건부)
          if [[ "${{ matrix.settings.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            echo "Setting up ARM64 cross-compilation environment..."
            
            # 기본 패키지 설치
            sudo apt-get install -y pkg-config pkgconf
            
            # ARM64 아키텍처 추가
            sudo dpkg --add-architecture arm64
            
            # ARM64 패키지 저장소 설정 (security 저장소 제외) - 동적 codename 사용
            UBUNTU_CODENAME=$(lsb_release -cs)
            sudo tee /etc/apt/sources.list.d/arm64.list > /dev/null << EOF
          # ARM64 패키지를 위한 ports 저장소 (security 제외)
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-backports main restricted universe multiverse
          EOF
            
            # 패키지 목록 업데이트
            echo "Updating package lists for ARM64..."
            sudo apt-get update
            
            # ARM64 라이브러리 설치 시도 (best effort)
            arm64_packages=(
              "libglib2.0-dev:arm64"
              "libgtk-3-dev:arm64"
              "libwebkit2gtk-4.1-dev:arm64"
              "libappindicator3-dev:arm64"
              "librsvg2-dev:arm64"
              "libgobject-introspection-1.0-dev:arm64"
              "libcairo2-dev:arm64"
              "libpango1.0-dev:arm64"
              "libgdk-pixbuf-2.0-dev:arm64"
              "libatk1.0-dev:arm64"
            )
            
            for package in "${arm64_packages[@]}"; do
              echo "Attempting to install $package..."
              if sudo apt-get install -y --no-install-recommends "$package"; then
                echo "Successfully installed $package"
              else
                echo "Failed to install $package, continuing with available packages..."
              fi
            done
            
            echo "ARM64 library installation completed"
          fi
      - name: setup java (android only)
        if: matrix.settings.android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: setup android sdk (android only)
        if: matrix.settings.android
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          log-accepted-android-sdk-licenses: false
      - name: install android ndk and setup (android only)
        if: matrix.settings.android
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
      - name: setup flatpak (flatpak only)
        if: matrix.settings.flatpak
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.freedesktop.Sdk.Extension.rust-nightly//23.08 org.freedesktop.Sdk.Extension.node20//23.08
          # DNS 설정 개선 (Flatpak 빌드용)
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
      - name: install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.flatpak }}
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.settings.android && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || (contains(matrix.settings.args, 'aarch64-unknown-linux-gnu') && 'aarch64-unknown-linux-gnu' || '')) }}
      - name: install Rust nightly (flatpak only)
        uses: dtolnay/rust-toolchain@nightly
        if: matrix.settings.flatpak
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Rust diagnostic
        run: |
          echo "=== Rust Toolchain Diagnostic ==="
          rustc --version
          cargo --version
          rustup show
          echo "=== Dependency Tree Analysis ==="
          cd src-tauri
          cargo tree --format "{p} {f}" | grep -E "(base64ct|edition)" || echo "No edition-related dependencies found"
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          # pnpm store path가 실패할 경우를 대비한 안전한 방법
          if command -v pnpm >/dev/null 2>&1; then
            STORE_PATH=$(pnpm store path 2>/dev/null || echo "")
            if [ -z "$STORE_PATH" ] || [ ! -d "$STORE_PATH" ]; then
              # 기본 pnpm store 경로 사용
              case "${{ runner.os }}" in
                Windows)
                  STORE_PATH="$HOME/AppData/Local/pnpm/store"
                  ;;
                macOS)
                  STORE_PATH="$HOME/Library/pnpm/store"
                  ;;
                Linux)
                  STORE_PATH="$HOME/.local/share/pnpm/store"
                  ;;
              esac
            fi
          else
            # pnpm이 없는 경우 기본 경로 설정
            case "${{ runner.os }}" in
              Windows)
                STORE_PATH="$HOME/AppData/Local/pnpm/store"
                ;;
              macOS)
                STORE_PATH="$HOME/Library/pnpm/store"
                ;;
              Linux)
                STORE_PATH="$HOME/.local/share/pnpm/store"
                ;;
            esac
          fi
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_OUTPUT
          echo "Using pnpm store path: $STORE_PATH"
      - uses: actions/cache@v4
        name: Setup pnpm cache
        continue-on-error: true
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            ${{ runner.os }}-pnpm-
      - name: configure dns and network settings (linux/macos only)
        if: startsWith(matrix.settings.platform, 'ubuntu') || matrix.settings.platform == 'macos-latest'
        run: |
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
      - name: install frontend dependencies
        if: ${{ !matrix.settings.flatpak }}
        shell: bash
        run: |
          # pnpm 설치 확인
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found, installing via corepack..."
            corepack enable
            corepack prepare pnpm@latest --activate
          fi
          
          # pnpm 버전 확인
          echo "pnpm version: $(pnpm --version)"
          
          for i in {1..3}; do
            echo "Attempt $i: Installing frontend dependencies..."
            if pnpm install --no-frozen-lockfile; then
              echo "Successfully installed dependencies on attempt $i"
              break
            else
              echo "Attempt $i failed, waiting 30 seconds before retry..."
              sleep 30
              if [ $i -eq 3 ]; then
                echo "All attempts failed, exiting..."
                exit 1
              fi
            fi
          done
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin
      - if: matrix.settings.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: add android rust targets
        if: matrix.settings.android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
      - name: setup arm linux cross compilation
        if: contains(matrix.settings.args, 'aarch64-unknown-linux-gnu')
        run: |
          rustup target add aarch64-unknown-linux-gnu
          
          # ARM64 크로스 컴파일 도구 개별 설치 (의존성 문제 해결)
          sudo apt-get update
          
          # 기본 크로스 컴파일 도구 설치
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            pkg-config
          
          # ARM64 아키텍처 추가
          sudo dpkg --add-architecture arm64
          
          # ARM64 패키지 저장소 설정
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          
          # 패키지 목록 업데이트 (오류 무시)
          sudo apt-get update || true
          
          # 필수 ARM64 개발 라이브러리 설치 (오류 무시하고 계속)
          essential_packages=(
            "libglib2.0-dev:arm64"
            "libgtk-3-dev:arm64"
            "libwebkit2gtk-4.1-dev:arm64"
            "libappindicator3-dev:arm64"
            "librsvg2-dev:arm64"
          )
          
          for package in "${essential_packages[@]}"; do
            echo "Attempting to install $package..."
            sudo apt-get install -y --no-install-recommends --fix-broken "$package" || {
              echo "Failed to install $package, trying alternative approach..."
              sudo apt-get install -y --no-install-recommends "$package" --ignore-missing || echo "Skipping $package due to dependency issues"
            }
          done
          
          # 환경변수 설정
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP_aarch64_unknown_linux_gnu=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L /usr/lib/aarch64-linux-gnu -L /usr/aarch64-linux-gnu/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV
          
          # 크로스 컴파일 도구 확인
          echo "Cross-compilation tools verification:"
          which aarch64-linux-gnu-gcc && aarch64-linux-gnu-gcc --version || echo "gcc not found"
          which aarch64-linux-gnu-g++ && aarch64-linux-gnu-g++ --version || echo "g++ not found"
          
          # 의존성 문제가 있어도 빌드 계속 진행
          echo "Cross-compilation environment setup completed with available tools"
      - uses: tauri-apps/tauri-action@v0.5.16
        if: ${{ !matrix.settings.flatpak && !matrix.settings.android }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: 'v__VERSION__'
          releaseName: 'v__VERSION__'
          releaseBody: 'Release of v__VERSION__'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.settings.args }}
          tauriScript: "pnpm tauri"
      - name: build android
        if: matrix.settings.android
        run: |
          pnpm tauri android init
          pnpm tauri android build
      - name: sign android apk
        if: matrix.settings.android
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_FILE" | base64 -d > keystore.jks
          mkdir -p android-build
          for apk in $(find src-tauri/gen/android -name "*.apk"); do
            apk_name=$(basename "$apk" .apk)
            signed_apk="android-build/${apk_name}-signed.apk"
            BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools/ | sort -V | tail -n 1)
            APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner"
            if [ -f "$APKSIGNER" ] && [ -x "$APKSIGNER" ]; then
              echo "Using apksigner: $APKSIGNER"
              $APKSIGNER sign \
                --ks keystore.jks \
                --ks-pass pass:"$KEYSTORE_PASSWORD" \
                --ks-key-alias "$KEY_ALIAS" \
                --key-pass pass:"$KEY_PASSWORD" \
                --out "$signed_apk" \
                "$apk"
            else
              echo "apksigner not found, falling back to jarsigner"
              jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
                -keystore keystore.jks \
                -storepass "$KEYSTORE_PASSWORD" \
                -keypass "$KEY_PASSWORD" \
                "$apk" "$KEY_ALIAS"
              if [ -f "$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign" ]; then
                $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign -v 4 "$apk" "$signed_apk"
              else
                cp "$apk" "$signed_apk"
              fi
            fi
            echo "Signed APK: $signed_apk"
          done
          rm -f keystore.jks
          find src-tauri/gen/android -name "*.apk" -exec cp {} android-build/ \; || true
      - name: upload android artifacts
        if: matrix.settings.android
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android-build/
      - name: build flatpak
        if: matrix.settings.flatpak
        run: |
          # Flatpak 매니페스트를 사용하여 빌드
          flatpak-builder --force-clean --repo=repo --ccache --install-deps-from=flathub build-dir co.aiclient.risu.yml
          flatpak build-bundle repo risuai.flatpak co.aiclient.risu
          mkdir -p flatpak-build
          mv risuai.flatpak flatpak-build/
      - name: upload flatpak artifact
        if: matrix.settings.flatpak
        uses: actions/upload-artifact@v4
        with:
          name: flatpak
          path: flatpak-build/